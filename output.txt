Tue Jun 10 05:05:39 UTC 2025
Linux LinuxMachine 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. If the section below is empty, the program compiles 
   without warnings with -Wall -Wextra flags
=====================================================
borrow.cpp:3:10: fatal error: store.h: No such file or directory
    3 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
comedy.cpp: In constructor ‘Comedy::Comedy(int, const string&, const string&, int)’:
comedy.cpp:5:48: error: no matching function for call to ‘Movie::Movie(int&, const string&, const string&, int&)’
    5 |   : Movie(stock, director, title, yearOfRelease) {
      |                                                ^
In file included from comedy.h:4,
                 from comedy.cpp:1:
movie.h:13:3: note: candidate: ‘Movie::Movie(const Movie&)’
   13 |   Movie(const Movie &other);
      |   ^~~~~
movie.h:13:3: note:   candidate expects 1 argument, 4 provided
movie.h:10:3: note: candidate: ‘Movie::Movie()’
   10 |   Movie();
      |   ^~~~~
movie.h:10:3: note:   candidate expects 0 arguments, 4 provided
In file included from commandfactory.cpp:1:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from history.cpp:1:
history.h:9:16: error: ‘Store’ has not been declared
    9 |   void execute(Store *store) override;
      |                ^~~~~
history.h:9:8: error: ‘void History::execute(int*)’ marked ‘override’, but does not override
    9 |   void execute(Store *store) override;
      |        ^~~~~~~
history.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void History::execute(Store* store) {
      |      ^~~~~~~
history.cpp:6:23: error: ‘Store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                       ^~~~~
history.cpp:6:30: error: ‘store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                              ^~~~~
In file included from inventory.cpp:1:
inventory.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
inventory.h:9:10: error: ‘void Inventory::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
inventory.cpp:5:6: error: variable or field ‘execute’ declared void
    5 | void Inventory::execute(Store* store) {
      |      ^~~~~~~~~
inventory.cpp:5:25: error: ‘Store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                         ^~~~~
inventory.cpp:5:32: error: ‘store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                                ^~~~~
In file included from read.cpp:1:
read.h:4:10: fatal error: store.h: No such file or directory
    4 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from return.cpp:1:
return.h:8:28: error: ‘Movie’ has not been declared
    8 |     Return(int customerId, Movie* movie);
      |                            ^~~~~
return.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
return.h:13:5: error: ‘Movie’ does not name a type
   13 |     Movie* movie;
      |     ^~~~~
return.h:9:10: error: ‘void Return::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
return.cpp:3:32: error: ‘Movie’ has not been declared
    3 | Return::Return(int customerId, Movie *movie)
      |                                ^~~~~
return.cpp: In constructor ‘Return::Return(int, int*)’:
return.cpp:4:31: error: class ‘Return’ does not have any field named ‘movie’
    4 |     : customerId(customerId), movie(movie) {}
      |                               ^~~~~
return.cpp: At global scope:
return.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void Return::execute(Store *store) {
      |      ^~~~~~
return.cpp:6:22: error: ‘Store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                      ^~~~~
return.cpp:6:29: error: ‘store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                             ^~~~~
In file included from store_test.cpp:15:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
=====================================================
2. If the section below is empty or has the expected output 
    the program puns and produces correct output
=====================================================
./create-output.sh: line 40: ./a.out: No such file or directory
=====================================================
3. If the section below is empty, then there are no clang-tidy warnings 
   (ignore warnings from system headers, such as "13554 warnings generated.")
=====================================================
[1/14] Processing file /home/cssuwbstudent/343-movies-sanaar/borrow.cpp.
18118 warnings and 4 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/borrow.cpp.
[2/14] Processing file /home/cssuwbstudent/343-movies-sanaar/classics.cpp.
28174 warnings and 4 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/classics.cpp.
[3/14] Processing file /home/cssuwbstudent/343-movies-sanaar/comedy.cpp.
38230 warnings and 5 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/comedy.cpp.
[4/14] Processing file /home/cssuwbstudent/343-movies-sanaar/command.cpp.
52606 warnings and 5 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/command.cpp.
[5/14] Processing file /home/cssuwbstudent/343-movies-sanaar/commandfactory.cpp.
70880 warnings and 6 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/commandfactory.cpp.
[6/14] Processing file /home/cssuwbstudent/343-movies-sanaar/customer.cpp.
86162 warnings and 6 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/customer.cpp.
[7/14] Processing file /home/cssuwbstudent/343-movies-sanaar/drama.cpp.
96218 warnings and 6 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/drama.cpp.
[8/14] Processing file /home/cssuwbstudent/343-movies-sanaar/history.cpp.
110595 warnings and 8 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/history.cpp.
[9/14] Processing file /home/cssuwbstudent/343-movies-sanaar/inventory.cpp.
124973 warnings and 10 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/inventory.cpp.
[10/14] Processing file /home/cssuwbstudent/343-movies-sanaar/main.cpp.
138776 warnings and 10 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/main.cpp.
[11/14] Processing file /home/cssuwbstudent/343-movies-sanaar/movie.cpp.
148832 warnings and 10 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/movie.cpp.
[12/14] Processing file /home/cssuwbstudent/343-movies-sanaar/read.cpp.
167257 warnings and 11 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/read.cpp.
[13/14] Processing file /home/cssuwbstudent/343-movies-sanaar/return.cpp.
181633 warnings and 30 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/return.cpp.
[14/14] Processing file /home/cssuwbstudent/343-movies-sanaar/store_test.cpp.
202355 warnings and 31 errors generated.
Error while processing /home/cssuwbstudent/343-movies-sanaar/store_test.cpp.
/home/cssuwbstudent/343-movies-sanaar/borrow.cpp:1:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
    1 | #include <iostream>
      | ^        ~~~~~~~~~~
      |          "borrow.h"
    2 | #include "borrow.h"
      |          ~~~~~~~~~~
      |          "customer.h"
    3 | #include "store.h"
      |          ~~~~~~~~~
      |          "movie.h"
    4 | #include "customer.h"
      |          ~~~~~~~~~~~~
      |          "store.h"
    5 | #include "movie.h"
      |          ~~~~~~~~~
      |          <iostream>
/home/cssuwbstudent/343-movies-sanaar/borrow.cpp:3:10: error: 'store.h' file not found [clang-diagnostic-error]
    3 | #include "store.h"
      |          ^~~~~~~~~
/home/cssuwbstudent/343-movies-sanaar/borrow.h:8:28: error: unknown type name 'Movie' [clang-diagnostic-error]
    8 |     Borrow(int customerId, Movie* movie);
      |                            ^
/home/cssuwbstudent/343-movies-sanaar/borrow.h:9:18: error: unknown type name 'Store' [clang-diagnostic-error]
    9 |     void execute(Store* store) override;
      |                  ^
/home/cssuwbstudent/343-movies-sanaar/borrow.h:13:5: error: unknown type name 'Movie' [clang-diagnostic-error]
   13 |     Movie* movie;
      |     ^
/home/cssuwbstudent/343-movies-sanaar/comedy.cpp:5:5: error: no matching constructor for initialization of 'Movie' [clang-diagnostic-error]
    5 |   : Movie(stock, director, title, yearOfRelease) {
      |     ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/343-movies-sanaar/movie.h:13:3: note: candidate constructor not viable: requires single argument 'other', but 4 arguments were provided
   13 |   Movie(const Movie &other);
      |   ^     ~~~~~~~~~~~~~~~~~~
/home/cssuwbstudent/343-movies-sanaar/movie.h:10:3: note: candidate constructor not viable: requires 0 arguments, but 4 were provided
   10 |   Movie();
      |   ^
/home/cssuwbstudent/343-movies-sanaar/commandfactory.cpp:16:26: error: method 'createCommand' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
   16 | Command *CommandFactory::createCommand(const string &line) {
      |                          ^
      | static 
/home/cssuwbstudent/343-movies-sanaar/commandfactory.h:5:10: error: 'store.h' file not found [clang-diagnostic-error]
    5 | #include "store.h"
      |          ^~~~~~~~~
/home/cssuwbstudent/343-movies-sanaar/history.cpp:6:23: error: unknown type name 'Store' [clang-diagnostic-error]
    6 | void History::execute(Store* store) {
      |                       ^
/home/cssuwbstudent/343-movies-sanaar/history.cpp:6:30: error: pointer parameter 'store' can be pointer to const [readability-non-const-parameter,-warnings-as-errors]
    6 | void History::execute(Store* store) {
      |                              ^
      |                       const 
/home/cssuwbstudent/343-movies-sanaar/history.h:9:16: error: unknown type name 'Store' [clang-diagnostic-error]
    9 |   void execute(Store *store) override;
      |                ^
/home/cssuwbstudent/343-movies-sanaar/inventory.cpp:5:17: error: method 'execute' can be made static [readability-convert-member-functions-to-static,-warnings-as-errors]
    5 | void Inventory::execute(Store* store) {
      |                 ^
      | static 
/home/cssuwbstudent/343-movies-sanaar/inventory.cpp:5:25: error: unknown type name 'Store' [clang-diagnostic-error]
    5 | void Inventory::execute(Store* store) {
      |                         ^
/home/cssuwbstudent/343-movies-sanaar/inventory.cpp:5:32: error: pointer parameter 'store' can be pointer to const [readability-non-const-parameter,-warnings-as-errors]
    5 | void Inventory::execute(Store* store) {
      |                                ^
      |                         const 
/home/cssuwbstudent/343-movies-sanaar/inventory.h:9:18: error: unknown type name 'Store' [clang-diagnostic-error]
    9 |     void execute(Store* store) override;
      |                  ^
/home/cssuwbstudent/343-movies-sanaar/read.cpp:35:3: error: this loop is infinite; none of its condition variables (cf, line) are updated in the loop body [bugprone-infinite-loop,-warnings-as-errors]
   35 |   while (getline(cf, line)) {
      |   ^
/home/cssuwbstudent/343-movies-sanaar/read.cpp:126:3: error: this loop is infinite; none of its condition variables (cmdf, line) are updated in the loop body [bugprone-infinite-loop,-warnings-as-errors]
  126 |   while (getline(cmdf, line)) {
      |   ^
/home/cssuwbstudent/343-movies-sanaar/read.h:4:10: error: 'store.h' file not found [clang-diagnostic-error]
    4 | #include "store.h"
      |          ^~~~~~~~~
/home/cssuwbstudent/343-movies-sanaar/return.cpp:3:32: error: unknown type name 'Movie' [clang-diagnostic-error]
    3 | Return::Return(int customerId, Movie *movie)
      |                                ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:6:22: error: unknown type name 'Store' [clang-diagnostic-error]
    6 | void Return::execute(Store *store) {
      |                      ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:8:3: error: unknown type name 'Customer' [clang-diagnostic-error]
    8 |   Customer *customer = store->getCustomer(customerId);
      |   ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:10:10: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   10 |     std::cerr << "Return command failed: Customer ID " << customerId << " not found." << std::endl;
      |     ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:10:95: error: no member named 'endl' in namespace 'std' [clang-diagnostic-error]
   10 |     std::cerr << "Return command failed: Customer ID " << customerId << " not found." << std::endl;
      |                                                                                          ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:15:3: error: use of undeclared identifier 'Movie'; did you mean 'movie'? [clang-diagnostic-error]
   15 |   Movie *storeMovie = store->getMovie(movie);
      |   ^~~~~
      |   movie
/home/cssuwbstudent/343-movies-sanaar/return.h:13:12: note: 'movie' declared here
   13 |     Movie* movie;
      |            ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:15:10: error: use of undeclared identifier 'storeMovie' [clang-diagnostic-error]
   15 |   Movie *storeMovie = store->getMovie(movie);
      |          ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:16:7: error: use of undeclared identifier 'storeMovie' [clang-diagnostic-error]
   16 |   if (storeMovie == nullptr) {
      |       ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:17:10: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   17 |     std::cerr << "Return command failed: Movie not found in inventory: ";
      |     ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:19:10: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   19 |     std::cerr << std::endl;
      |     ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:19:23: error: no member named 'endl' in namespace 'std' [clang-diagnostic-error]
   19 |     std::cerr << std::endl;
      |                  ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:24:37: error: use of undeclared identifier 'storeMovie' [clang-diagnostic-error]
   24 |   if (!store->returnMovie(customer, storeMovie)) {
      |                                     ^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:25:10: error: no member named 'cerr' in namespace 'std' [clang-diagnostic-error]
   25 |     std::cerr << "Return command failed: Customer " << customerId << " did not borrow this movie." << std::endl;
      |     ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:25:108: error: no member named 'endl' in namespace 'std' [clang-diagnostic-error]
   25 |     std::cerr << "Return command failed: Customer " << customerId << " did not borrow this movie." << std::endl;
      |                                                                                                       ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:27:10: error: no member named 'cout' in namespace 'std' [clang-diagnostic-error]
   27 |     std::cout << "Return successful: Customer " << customerId << " returned movie." << std::endl;
      |     ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.cpp:27:93: error: no member named 'endl' in namespace 'std' [clang-diagnostic-error]
   27 |     std::cout << "Return successful: Customer " << customerId << " returned movie." << std::endl;
      |                                                                                        ~~~~~^
/home/cssuwbstudent/343-movies-sanaar/return.h:8:28: error: unknown type name 'Movie' [clang-diagnostic-error]
    8 |     Return(int customerId, Movie* movie);
      |                            ^
/home/cssuwbstudent/343-movies-sanaar/return.h:9:18: error: unknown type name 'Store' [clang-diagnostic-error]
    9 |     void execute(Store* store) override;
      |                  ^
/home/cssuwbstudent/343-movies-sanaar/return.h:13:5: error: unknown type name 'Movie' [clang-diagnostic-error]
   13 |     Movie* movie;
      |     ^
/home/cssuwbstudent/343-movies-sanaar/store_test.cpp:16:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
   16 | #include "store.h"
      | ^        ~~~~~~~~~
      |          "read.h"
   17 | #include "read.h"
      |          ~~~~~~~~
      |          "store.h"
Suppressed 202347 warnings (202347 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
8 warnings treated as errors
=====================================================
4. If the section below is empty, clang-format does not find any formatting issues
   You can fix formatting errors using "clang-format -i <filename>" on command line
=====================================================
Running clang-format on ./borrow.cpp
1d0
< #include <iostream>
3d1
< #include "store.h"
5a4,5
> #include "store.h"
> #include <iostream>
14,15c14,16
<     std::cerr << "Borrow command failed: Customer ID " << customerId << " not found." << std::endl;
<     return;  // safely exit without throwing
---
>     std::cerr << "Borrow command failed: Customer ID " << customerId
>               << " not found." << std::endl;
>     return; // safely exit without throwing
22c23
<     movie->printShort();  // or print title/identifier however you do
---
>     movie->printShort(); // or print title/identifier however you do
29,32c30,36
<     std::cerr << "Borrow command failed: Could not borrow movie (maybe out of stock)." << std::endl;
<         } else {
<     std::cout << "Borrow successful: Customer " << customerId << " borrowed movie." << std::endl;
<         }
---
>     std::cerr
>         << "Borrow command failed: Could not borrow movie (maybe out of stock)."
>         << std::endl;
>   } else {
>     std::cout << "Borrow successful: Customer " << customerId
>               << " borrowed movie." << std::endl;
>   }
Running clang-format on ./classics.cpp
22,23c22,23
<         return false;
<     }
---
>     return false;
>   }
36,37c36,37
<         return false;
<     }
---
>     return false;
>   }
60c60
< }
---
>     }
68,69c68,69
<          std::to_string(monthOfRelease) + " " + std::to_string(yearOfRelease) + ", " +
<          majorActorFirstName + " " + majorActorLastName;
---
>          std::to_string(monthOfRelease) + " " + std::to_string(yearOfRelease) +
>          ", " + majorActorFirstName + " " + majorActorLastName;
Running clang-format on ./comedy.cpp
4,5c4,6
< Comedy::Comedy(int stock, const std::string &director, const std::string &title, int yearOfRelease)
<   : Movie(stock, director, title, yearOfRelease) {
---
> Comedy::Comedy(int stock, const std::string &director, const std::string &title,
>                int yearOfRelease)
>     : Movie(stock, director, title, yearOfRelease) {
13,14c14,15
<         return false;
<     }
---
>     return false;
>   }
23,24c24,25
<         return false;
<     }
---
>     return false;
>   }
42c43
< }
---
>   }
Running clang-format on ./command.cpp
Running clang-format on ./commandfactory.cpp
98c98
<     } 
---
>     }
100d99
<     
Running clang-format on ./customer.cpp
6,8c6,8
< Customer::Customer(int id, const std::string& name) {
<     this->id = id;
<     this->name = name;
---
> Customer::Customer(int id, const std::string &name) {
>   this->id = id;
>   this->name = name;
12,14c12
< int Customer::getId() const {
<     return id;
<     }
---
> int Customer::getId() const { return id; }
16,18c14
< std::string Customer::getName() const {
<     return name;
< }
---
> std::string Customer::getName() const { return name; }
21,22c17,18
< void Customer::addHistory(const std::string& entry) {
<     history.push_back(entry);
---
> void Customer::addHistory(const std::string &entry) {
>   history.push_back(entry);
27,30c23,26
<     if (history.empty()) {
<         cout << "No transactions found.\n";
<         return;
< }
---
>   if (history.empty()) {
>     cout << "No transactions found.\n";
>     return;
>   }
32,34c28,30
<     for (const string& record : history) {
<         cout << record << endl;
< }
---
>   for (const string &record : history) {
>     cout << record << endl;
>   }
Running clang-format on ./drama.cpp
27,28c27,28
<         return false;
<     }
---
>     return false;
>   }
41,42c41,42
<         return false;
<     }
---
>     return false;
>   }
46c46
< }
---
>   }
52c52,53
<   return "D, " + std::to_string(stock) + ", " + director + ", " + title + ", " + std::to_string(yearOfRelease);
---
>   return "D, " + std::to_string(stock) + ", " + director + ", " + title + ", " +
>          std::to_string(yearOfRelease);
54d54
< 
Running clang-format on ./history.cpp
3,4c3
< History::History(int customerId)
<     : customerId(customerId) {}
---
> History::History(int customerId) : customerId(customerId) {}
6c5
< void History::execute(Store* store) {
---
> void History::execute(Store *store) {
Running clang-format on ./inventory.cpp
5,7c5
< void Inventory::execute(Store* store) {
<     store->displayInventory();
< } 
---
> void Inventory::execute(Store *store) { store->displayInventory(); }
Running clang-format on ./main.cpp
Running clang-format on ./movie.cpp
Running clang-format on ./read.cpp
27c27
<     }
---
>   }
31c31
< }
---
>   }
38c38
<   }
---
>     }
58c58
<   stringstream ss(line);
---
>     stringstream ss(line);
112c112,113
<         Movie *m = new Classics(stock, director, title, year, month, actorFirst, actorLast);
---
>         Movie *m = new Classics(stock, director, title, year, month, actorFirst,
>                                 actorLast);
115c116,117
<         cerr << "Unknown movie type: " << genre << ", discarding line: " << line << endl;
---
>         cerr << "Unknown movie type: " << genre << ", discarding line: " << line
>              << endl;
120a123
>     }
122d124
< }
Running clang-format on ./return.cpp
10c10,11
<     std::cerr << "Return command failed: Customer ID " << customerId << " not found." << std::endl;
---
>     std::cerr << "Return command failed: Customer ID " << customerId
>               << " not found." << std::endl;
25c26,27
<     std::cerr << "Return command failed: Customer " << customerId << " did not borrow this movie." << std::endl;
---
>     std::cerr << "Return command failed: Customer " << customerId
>               << " did not borrow this movie." << std::endl;
27c29,30
<     std::cout << "Return successful: Customer " << customerId << " returned movie." << std::endl;
---
>     std::cout << "Return successful: Customer " << customerId
>               << " returned movie." << std::endl;
Running clang-format on ./store_test.cpp
16d15
< #include "store.h"
17a17
> #include "store.h"
53,54c53,54
<   loadStoreData(store, "data4customers.txt", "data4movies.txt", "data4commands.txt");
< 
---
>   loadStoreData(store, "data4customers.txt", "data4movies.txt",
>                 "data4commands.txt");
=====================================================
5. If there are any memory leaks, it should be in the output below
=====================================================
borrow.cpp:3:10: fatal error: store.h: No such file or directory
    3 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
comedy.cpp: In constructor ‘Comedy::Comedy(int, const string&, const string&, int)’:
comedy.cpp:5:48: error: no matching function for call to ‘Movie::Movie(int&, const string&, const string&, int&)’
    5 |   : Movie(stock, director, title, yearOfRelease) {
      |                                                ^
In file included from comedy.h:4,
                 from comedy.cpp:1:
movie.h:13:3: note: candidate: ‘Movie::Movie(const Movie&)’
   13 |   Movie(const Movie &other);
      |   ^~~~~
movie.h:13:3: note:   candidate expects 1 argument, 4 provided
movie.h:10:3: note: candidate: ‘Movie::Movie()’
   10 |   Movie();
      |   ^~~~~
movie.h:10:3: note:   candidate expects 0 arguments, 4 provided
In file included from commandfactory.cpp:1:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from history.cpp:1:
history.h:9:16: error: ‘Store’ has not been declared
    9 |   void execute(Store *store) override;
      |                ^~~~~
history.h:9:8: error: ‘void History::execute(int*)’ marked ‘override’, but does not override
    9 |   void execute(Store *store) override;
      |        ^~~~~~~
history.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void History::execute(Store* store) {
      |      ^~~~~~~
history.cpp:6:23: error: ‘Store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                       ^~~~~
history.cpp:6:30: error: ‘store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                              ^~~~~
In file included from inventory.cpp:1:
inventory.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
inventory.h:9:10: error: ‘void Inventory::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
inventory.cpp:5:6: error: variable or field ‘execute’ declared void
    5 | void Inventory::execute(Store* store) {
      |      ^~~~~~~~~
inventory.cpp:5:25: error: ‘Store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                         ^~~~~
inventory.cpp:5:32: error: ‘store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                                ^~~~~
In file included from read.cpp:1:
read.h:4:10: fatal error: store.h: No such file or directory
    4 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from return.cpp:1:
return.h:8:28: error: ‘Movie’ has not been declared
    8 |     Return(int customerId, Movie* movie);
      |                            ^~~~~
return.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
return.h:13:5: error: ‘Movie’ does not name a type
   13 |     Movie* movie;
      |     ^~~~~
return.h:9:10: error: ‘void Return::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
return.cpp:3:32: error: ‘Movie’ has not been declared
    3 | Return::Return(int customerId, Movie *movie)
      |                                ^~~~~
return.cpp: In constructor ‘Return::Return(int, int*)’:
return.cpp:4:31: error: class ‘Return’ does not have any field named ‘movie’
    4 |     : customerId(customerId), movie(movie) {}
      |                               ^~~~~
return.cpp: At global scope:
return.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void Return::execute(Store *store) {
      |      ^~~~~~
return.cpp:6:22: error: ‘Store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                      ^~~~~
return.cpp:6:29: error: ‘store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                             ^~~~~
In file included from store_test.cpp:15:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
=====================================================
6. Using valgrind to check for memory leaks
   Check for "definitely lost" in the output below
=====================================================
borrow.cpp:3:10: fatal error: store.h: No such file or directory
    3 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
comedy.cpp: In constructor ‘Comedy::Comedy(int, const string&, const string&, int)’:
comedy.cpp:5:48: error: no matching function for call to ‘Movie::Movie(int&, const string&, const string&, int&)’
    5 |   : Movie(stock, director, title, yearOfRelease) {
      |                                                ^
In file included from comedy.h:4,
                 from comedy.cpp:1:
movie.h:13:3: note: candidate: ‘Movie::Movie(const Movie&)’
   13 |   Movie(const Movie &other);
      |   ^~~~~
movie.h:13:3: note:   candidate expects 1 argument, 4 provided
movie.h:10:3: note: candidate: ‘Movie::Movie()’
   10 |   Movie();
      |   ^~~~~
movie.h:10:3: note:   candidate expects 0 arguments, 4 provided
In file included from commandfactory.cpp:1:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from history.cpp:1:
history.h:9:16: error: ‘Store’ has not been declared
    9 |   void execute(Store *store) override;
      |                ^~~~~
history.h:9:8: error: ‘void History::execute(int*)’ marked ‘override’, but does not override
    9 |   void execute(Store *store) override;
      |        ^~~~~~~
history.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void History::execute(Store* store) {
      |      ^~~~~~~
history.cpp:6:23: error: ‘Store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                       ^~~~~
history.cpp:6:30: error: ‘store’ was not declared in this scope
    6 | void History::execute(Store* store) {
      |                              ^~~~~
In file included from inventory.cpp:1:
inventory.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
inventory.h:9:10: error: ‘void Inventory::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
inventory.cpp:5:6: error: variable or field ‘execute’ declared void
    5 | void Inventory::execute(Store* store) {
      |      ^~~~~~~~~
inventory.cpp:5:25: error: ‘Store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                         ^~~~~
inventory.cpp:5:32: error: ‘store’ was not declared in this scope
    5 | void Inventory::execute(Store* store) {
      |                                ^~~~~
In file included from read.cpp:1:
read.h:4:10: fatal error: store.h: No such file or directory
    4 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
In file included from return.cpp:1:
return.h:8:28: error: ‘Movie’ has not been declared
    8 |     Return(int customerId, Movie* movie);
      |                            ^~~~~
return.h:9:18: error: ‘Store’ has not been declared
    9 |     void execute(Store* store) override;
      |                  ^~~~~
return.h:13:5: error: ‘Movie’ does not name a type
   13 |     Movie* movie;
      |     ^~~~~
return.h:9:10: error: ‘void Return::execute(int*)’ marked ‘override’, but does not override
    9 |     void execute(Store* store) override;
      |          ^~~~~~~
return.cpp:3:32: error: ‘Movie’ has not been declared
    3 | Return::Return(int customerId, Movie *movie)
      |                                ^~~~~
return.cpp: In constructor ‘Return::Return(int, int*)’:
return.cpp:4:31: error: class ‘Return’ does not have any field named ‘movie’
    4 |     : customerId(customerId), movie(movie) {}
      |                               ^~~~~
return.cpp: At global scope:
return.cpp:6:6: error: variable or field ‘execute’ declared void
    6 | void Return::execute(Store *store) {
      |      ^~~~~~
return.cpp:6:22: error: ‘Store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                      ^~~~~
return.cpp:6:29: error: ‘store’ was not declared in this scope
    6 | void Return::execute(Store *store) {
      |                             ^~~~~
In file included from store_test.cpp:15:
commandfactory.h:5:10: fatal error: store.h: No such file or directory
    5 | #include "store.h"
      |          ^~~~~~~~~
compilation terminated.
cat: valgrind-output.txt: No such file or directory
Tue Jun 10 05:05:59 UTC 2025
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
